"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2207],{62207:(e,t,r)=>{function a(e,t){let r=new Date().toISOString(),a={...e};return t&&(a.chartType="dual-axis"),{id:"chart_"+Date.now()+"_"+Math.random().toString(36).substring(2,9),...a,createdAt:r,updatedAt:r}}r.d(t,{A9:()=>l,AW:()=>c,Ou:()=>o,oI:()=>s,rh:()=>n,sF:()=>a});let o=async(e,t,r)=>{try{let s;try{s=new URL(e)}catch(t){return{valid:!1,message:"Invalid URL format: ".concat(e)}}t&&s.searchParams.append("api_key",t);let n={method:r?"POST":"GET",headers:{"Content-Type":"application/json"},cache:"no-store"};if(r&&Object.keys(r).length>0){n.body=JSON.stringify({parameters:r}),console.log("API request parameters:",JSON.stringify(r,null,2)),console.log("Full request body:",n.body);let e=Object.keys(r);e.length>1&&console.log("Multiple parameters detected (".concat(e.length,"): ").concat(e.join(", ")))}console.log("Validating API endpoint: ".concat(s.toString()," with method: ").concat(n.method));let c=new AbortController,l=setTimeout(()=>c.abort(),1e4);try{var a,o;let e=await fetch(s.toString(),{...n,signal:c.signal});if(clearTimeout(l),console.log("API response status: ".concat(e.status," ").concat(e.statusText)),!e.ok){let t="",r=null;try{let a=await e.text();t=a.length>0?" Error details: ".concat(a):"";try{r=JSON.parse(a)}catch(e){}if(r&&r.message&&r.message.includes("parameter values are incompatible")){let e=r.message.match(/parameter values are incompatible.*?: (.+?)($|\})/i),t=e?e[1].trim():null;if(t)return{valid:!1,message:'Parameter error: "'.concat(t,'" appears to be incompatible. This might be due to incorrect case sensitivity - ensure the parameter name matches exactly what the API expects (e.g., "currency" vs "Currency").')}}}catch(e){}return{valid:!1,message:"API request failed with status ".concat(e.status,": ").concat(e.statusText,".").concat(t," Check if the URL is correct and accessible.")}}let t=await e.json(),i=[],u=[];if(console.log("API response structure:",Object.keys(t)),null==t||null==(o=t.query_result)||null==(a=o.data)?void 0:a.rows)i=t.query_result.data.rows,u=t.query_result.data.columns.map(e=>e.name);else if(Array.isArray(t))(i=t).length>0&&(u=Object.keys(i[0]));else if((null==t?void 0:t.data)&&Array.isArray(t.data))(i=t.data).length>0&&(u=Object.keys(i[0]));else if((null==t?void 0:t.rows)&&Array.isArray(t.rows))(i=t.rows).length>0&&(u=Object.keys(i[0]));else if((null==t?void 0:t.results)&&Array.isArray(t.results))(i=t.results).length>0&&(u=Object.keys(i[0]));else{if(null==t?void 0:t.error)return{valid:!1,message:"API returned an error: ".concat(t.error)};return console.error("Unrecognized API response structure:",t),{valid:!1,message:"API response does not have a recognized structure. Check the console for details."}}if(0===i.length)return{valid:!0,message:"API endpoint is valid but returned no data",data:{columns:[]}};let d=r&&Object.keys(r).length>0?" (with ".concat(Object.keys(r).length," filter parameters)"):"";return{valid:!0,message:"API endpoint is valid".concat(d,". Found ").concat(i.length," rows and ").concat(u.length," columns."),data:{columns:u,sampleRows:i.slice(0,3)}}}catch(e){throw clearTimeout(l),e}}catch(e){if(e instanceof Error){if("AbortError"===e.name)return{valid:!1,message:"API request timed out after 10 seconds"};if(e.message.includes("Failed to fetch")||e.message.includes("NetworkError"))return{valid:!1,message:"Network error: Unable to reach the API. Check if the endpoint is accessible from your current network."};if(e.message.includes("CORS"))return{valid:!1,message:"CORS error: The API doesn't allow requests from this origin. You may need to enable CORS on the API server."};return console.error("API validation error:",e),{valid:!1,message:"Error validating API: ".concat(e.message)}}return console.error("Unknown API validation error:",e),{valid:!1,message:"Unknown error validating API endpoint"}}};async function s(e){try{console.log("Saving chart with title: ".concat(e.title)),e.updatedAt=new Date().toISOString(),e.createdAt||(e.createdAt=e.updatedAt);let t="".concat(window.location.protocol,"//").concat(window.location.host),r="".concat(t,"/api/charts");console.log("Sending POST request to ".concat(r));let a=await i(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!a.ok){let t="API Error: ".concat(a.status," - ").concat(a.statusText),r="";try{let e=await a.json();r=e.error||e.details||"Unknown error",t+=" - ".concat(r)}catch(e){}console.error(t);{console.warn("API error, falling back to localStorage temporarily");let t="solana-charts",r=[],a=localStorage.getItem(t);a&&(r=JSON.parse(a));let o=r.findIndex(t=>t.id===e.id);o>=0?r[o]=e:r.push(e),localStorage.setItem(t,JSON.stringify(r)),console.log("Chart saved temporarily to localStorage")}throw Error(t)}let o=await a.json();return console.log("Chart saved successfully:",o),!0}catch(e){console.error("Error saving chart config:",e);{let t="Failed to save chart.";e instanceof Error&&(e.message.includes("500")||e.message.includes("Internal Server Error")?t+=" There was a server error processing your request. The chart may have been saved locally as a temporary backup.":e.message.includes("network")||e.message.includes("connection")?t+=" There appears to be a network or connection issue.":e.message.includes("S3")?t+=" There was an issue with S3 storage.":t+=" "+e.message),alert(t+=" Please try again later or contact support if the issue persists.")}return!1}}async function n(){try{try{let e="".concat(window.location.protocol,"//").concat(window.location.host),t=await i("".concat(e,"/api/charts"));if(!t.ok){console.error("API error: ".concat(t.status," - ").concat(t.statusText));{console.warn("Falling back to localStorage for charts");let e=localStorage.getItem("solana-charts");if(e)return JSON.parse(e)}return[]}return(await t.json()).charts||[]}catch(e){console.error("Error calling charts API:",e);{console.warn("Falling back to localStorage for charts due to API error");let e=localStorage.getItem("solana-charts");if(e)return JSON.parse(e)}return[]}}catch(e){return console.error("Error getting chart configs:",e),[]}}async function c(e){console.log("Getting charts for page: ".concat(e));try{return(await n()).filter(t=>t.page===e)}catch(e){return console.error("Error fetching charts:",e),[]}}async function l(e){try{let t="".concat(window.location.protocol,"//").concat(window.location.host),r=await i("".concat(t,"/api/charts/").concat(e),{method:"DELETE"});if(!r.ok)throw Error("API error: ".concat(r.statusText));return console.log("Chart ".concat(e," deleted successfully")),!0}catch(e){console.error("Error deleting chart:",e);{let t="Failed to delete chart.";e instanceof Error&&(t+=" "+e.message),alert(t)}return!1}}async function i(e,t){try{return await fetch(e,t)}catch(r){return console.warn("Initial fetch failed, trying XMLHttpRequest fallback:",r),new Promise((r,a)=>{let o=new XMLHttpRequest;o.open((null==t?void 0:t.method)||"GET",e),(null==t?void 0:t.headers)&&Object.entries(t.headers).forEach(e=>{let[t,r]=e;o.setRequestHeader(t,r)}),o.onload=function(){r({ok:o.status>=200&&o.status<300,status:o.status,statusText:o.statusText,headers:new Headers,text:()=>Promise.resolve(o.responseText),json:()=>Promise.resolve(JSON.parse(o.responseText))})},o.onerror=function(){a(Error("Network error with XMLHttpRequest"))},o.ontimeout=function(){a(Error("Timeout with XMLHttpRequest"))},(null==t?void 0:t.body)?o.send(t.body):o.send()})}}}}]);