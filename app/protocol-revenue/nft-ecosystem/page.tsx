"use client";

import React, { useState } from "react";
import ChartCard from "@/app/components/shared/ChartCard";
import LegendItem from "@/app/components/shared/LegendItem";
import NFTMarketplaceRevenueChart from "@/app/components/charts/protocol-revenue/nft-ecosystem/NFTMarketplaceRevenueChart";
import { prepareNFTMarketplaceRevenueCSV } from "@/app/api/protocol-revenue/nft-ecosystem/nftMarketplaceRevenueData";
import { handleCSVDownload } from "@/app/utils/csvDownload";
import DashboardRenderer from "@/app/admin/components/dashboard-renderer";

export default function NFTEcosystemPage() {
  const [modalOpen, setModalOpen] = useState(false);
  const [legends, setLegends] = useState<{label: string, color: string, value?: number}[]>([]);
  const [isDownloading, setIsDownloading] = useState(false);

  const downloadNFTMarketplaceRevenueCSV = async () => {
    if (isDownloading) return;
    await handleCSVDownload(
      prepareNFTMarketplaceRevenueCSV,
      'nft-marketplace-revenue.csv',
      setIsDownloading
    );
  };

  const formatCurrency = (value?: number) => {
    if (value === undefined) return '';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      notation: 'compact',
      compactDisplay: 'short',
      maximumFractionDigits: 1
    }).format(value);
  };

  return (
    <div className="space-y-6">
      
      <section className="grid grid-cols-1 gap-4">
        <ChartCard
          title="NFT Marketplace Protocol Revenue"
          description="Revenue generated by NFT Marketplaces on Solana"
          accentColor="indigo"
          onExpandClick={() => setModalOpen(true)}
          onDownloadClick={downloadNFTMarketplaceRevenueCSV}
          isDownloading={isDownloading}
          legendWidth="1/5"
          className="h-[500px]"
          legend={
            <>
              {legends.map(legend => (
                <LegendItem
                  key={legend.label}
                  label={legend.label}
                  color={legend.color}
                  shape="square"
                  tooltipText={legend.value ? formatCurrency(legend.value) : undefined}
                />
              ))}
            </>
          }
        >
          <NFTMarketplaceRevenueChart
            isModalOpen={modalOpen}
            onModalClose={() => setModalOpen(false)}
            legendsChanged={setLegends}
          />
        </ChartCard>
      </section>
      
      {/* dynamic charts from admin section */}
      <DashboardRenderer pageId="nft-ecosystem" />
    </div>
  );
} 