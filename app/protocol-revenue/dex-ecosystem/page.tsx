"use client";

import React, { useState } from "react";
import ChartCard from "@/app/components/shared/ChartCard";
import LegendItem from "@/app/components/shared/LegendItem";
import DisplayModeFilter from "@/app/components/shared/filters/DisplayModeFilter";
import { DisplayMode } from "@/app/components/shared/filters/DisplayModeFilter";
import DappRevenueChart from "@/app/components/charts/protocol-revenue/total/DappRevenueChart";
import DexRevenueChart from "@/app/components/charts/protocol-revenue/dex-ecosystem/DexRevenueChart";
import LaunchpadRevenueChart from "@/app/components/charts/protocol-revenue/dex-ecosystem/LaunchpadRevenueChart";
import TradingAppRevenueChart from "@/app/components/charts/protocol-revenue/dex-ecosystem/TradingAppRevenueChart";
import TelegramBotRevenueChart from "@/app/components/charts/protocol-revenue/dex-ecosystem/TelegramBotRevenueChart";
import { prepareDexRevenueCSV } from "@/app/api/protocol-revenue/dex-ecosystem/dexRevenueData";
import { prepareLaunchpadRevenueCSV } from "@/app/api/protocol-revenue/dex-ecosystem/launchpadRevenueData";
import { prepareTradingAppRevenueCSV } from "@/app/api/protocol-revenue/dex-ecosystem/tradingAppRevenueData";
import { prepareTelegramBotRevenueCSV } from "@/app/api/protocol-revenue/dex-ecosystem/telegramBotRevenueData";
import { handleCSVDownload } from "@/app/utils/csvDownload";
import DashboardRenderer from "@/app/admin/components/dashboard-renderer";

export default function ProtocolRevenueDexEcosystemPage() {
  const [displayMode, setDisplayMode] = useState<DisplayMode>('absolute');
  
  // Chart legend state
  const [dexRevenueLegends, setDexRevenueLegends] = useState<{label: string, color: string, value?: number}[]>([]);
  const [launchpadRevenueLegends, setLaunchpadRevenueLegends] = useState<{label: string, color: string, value?: number}[]>([]);
  const [tradingAppRevenueLegends, setTradingAppRevenueLegends] = useState<{label: string, color: string, value?: number}[]>([]);
  const [telegramBotRevenueLegends, setTelegramBotRevenueLegends] = useState<{label: string, color: string, value?: number}[]>([]);
  
  // Modal states
  const [chart1ModalOpen, setChart1ModalOpen] = useState(false);
  const [chart2ModalOpen, setChart2ModalOpen] = useState(false);
  const [chart3ModalOpen, setChart3ModalOpen] = useState(false);
  const [chart4ModalOpen, setChart4ModalOpen] = useState(false);
  
  // Download states
  const [isDexDownloading, setIsDexDownloading] = useState(false);
  const [isLaunchpadDownloading, setIsLaunchpadDownloading] = useState(false);
  const [isTradingAppDownloading, setIsTradingAppDownloading] = useState(false);
  const [isTelegramBotDownloading, setIsTelegramBotDownloading] = useState(false);

  // Download handlers
  const downloadDexRevenueCSV = async () => {
    if (isDexDownloading) return;
    await handleCSVDownload(
      prepareDexRevenueCSV,
      'dex-revenue.csv',
      setIsDexDownloading
    );
  };

  const downloadLaunchpadRevenueCSV = async () => {
    if (isLaunchpadDownloading) return;
    await handleCSVDownload(
      prepareLaunchpadRevenueCSV,
      'launchpad-revenue.csv',
      setIsLaunchpadDownloading
    );
  };

  const downloadTradingAppRevenueCSV = async () => {
    if (isTradingAppDownloading) return;
    await handleCSVDownload(
      prepareTradingAppRevenueCSV,
      'trading-app-revenue.csv',
      setIsTradingAppDownloading
    );
  };

  const downloadTelegramBotRevenueCSV = async () => {
    if (isTelegramBotDownloading) return;
    await handleCSVDownload(
      prepareTelegramBotRevenueCSV,
      'telegram-bot-revenue.csv',
      setIsTelegramBotDownloading
    );
  };

  // Format currency values
  const formatCurrency = (value?: number) => {
    if (value === undefined) return '';
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      notation: 'compact',
      compactDisplay: 'short',
      maximumFractionDigits: 1
    }).format(value);
  };

  return (
    <div className="space-y-6">
      
      
      {/* First row of charts */}
      <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {/* Chart 1 - DEX Revenue */}
        <ChartCard
          title="DEX Protocol Revenue"
          description="Revenue generated by DEXs on Solana"
          accentColor="blue"
          onExpandClick={() => setChart1ModalOpen(true)}
          onDownloadClick={downloadDexRevenueCSV}
          isDownloading={isDexDownloading}
          legendWidth="1/5"
          className="h-[500px]"
          legend={
            <>
              {dexRevenueLegends.map(legend => (
                <LegendItem 
                  key={legend.label}
                  label={legend.label} 
                  color={legend.color} 
                  shape="square"
                  tooltipText={legend.value ? formatCurrency(legend.value) : undefined}
                />
              ))}
            </>
          }
        >
          <DexRevenueChart
            isModalOpen={chart1ModalOpen}
            onModalClose={() => setChart1ModalOpen(false)}
            legendsChanged={setDexRevenueLegends}
          />
        </ChartCard>

        {/* Chart 2 - Memecoin LaunchPad Revenue */}
        <ChartCard
          title="Memecoin LaunchPad Revenue"
          description="Revenue generated by Memecoin LaunchPads on Solana"
          accentColor="purple"
          onExpandClick={() => setChart2ModalOpen(true)}
          onDownloadClick={downloadLaunchpadRevenueCSV}
          isDownloading={isLaunchpadDownloading}
          legendWidth="1/5"
          className="h-[500px]"
          legend={
            <>
              {launchpadRevenueLegends.map(legend => (
                <LegendItem 
                  key={legend.label}
                  label={legend.label} 
                  color={legend.color} 
                  shape="square"
                  tooltipText={legend.value ? formatCurrency(legend.value) : undefined}
                />
              ))}
            </>
          }
        >
          <LaunchpadRevenueChart
            isModalOpen={chart2ModalOpen}
            onModalClose={() => setChart2ModalOpen(false)}
            legendsChanged={setLaunchpadRevenueLegends}
          />
        </ChartCard>
      </section>
      
      {/* Second row of charts */}
      <section className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        {/* Chart 3 - Memecoin Trading App Revenue */}
        <ChartCard
          title="Memecoin Trading App Revenue"
          description="Revenue generated by Memecoin Trading Apps on Solana"
          accentColor="green"
          onExpandClick={() => setChart3ModalOpen(true)}
          onDownloadClick={downloadTradingAppRevenueCSV}
          isDownloading={isTradingAppDownloading}
          legendWidth="1/5"
          className="h-[500px]"
          legend={
            <>
              {tradingAppRevenueLegends.map(legend => (
                <LegendItem 
                  key={legend.label}
                  label={legend.label} 
                  color={legend.color} 
                  shape="square"
                  tooltipText={legend.value ? formatCurrency(legend.value) : undefined}
                />
              ))}
            </>
          }
        >
          <TradingAppRevenueChart
            isModalOpen={chart3ModalOpen}
            onModalClose={() => setChart3ModalOpen(false)}
            legendsChanged={setTradingAppRevenueLegends}
          />
        </ChartCard>

        {/* Chart 4 - Telegram Bot Revenue */}
        <ChartCard
          title="Telegram Bot Revenue"
          description="Revenue generated by Telegram Bots on Solana"
          accentColor="orange"
          onExpandClick={() => setChart4ModalOpen(true)}
          onDownloadClick={downloadTelegramBotRevenueCSV}
          isDownloading={isTelegramBotDownloading}
          legendWidth="1/5"
          className="h-[500px]"
          legend={
            <>
              {telegramBotRevenueLegends.map(legend => (
                <LegendItem 
                  key={legend.label}
                  label={legend.label} 
                  color={legend.color} 
                  shape="square"
                  tooltipText={legend.value ? formatCurrency(legend.value) : undefined}
                />
              ))}
            </>
          }
        >
          <TelegramBotRevenueChart
            isModalOpen={chart4ModalOpen}
            onModalClose={() => setChart4ModalOpen(false)}
            legendsChanged={setTelegramBotRevenueLegends}
          />
        </ChartCard>
      </section>
      
      {/* dynamic charts from admin section */}
      <DashboardRenderer pageId="dex-ecosystem" />
    </div>
  );
} 